@inherits RBACCompontentBase

<MCard Class="mt-2">
    <MCardText Class="pa-6">
        <MRow>
            <MCol Md=6 Sm=12 Class="d-flex block-center">
                <span class="text-btn neutral-lighten-1--text">@T("Show"):</span>
                <MSelect @bind-Value="RolePage.PageSize"
                         Color="primary"
                         Style="max-width:120px;"
                         Dense
                         Class="mx-6"
                         HideDetails="@("auto")"
                         Outlined
                         Items="@RolePage.PageSizes"
                         ItemText="u => u.ToString()"
                         ItemValue="u => u">
                </MSelect>
                <span class="text-btn">@T("Entries")</span>
            </MCol>
            <MCol Md=6 Sm=12 Class="d-flex block-center">
                <MTextField @bind-Value="RolePage.Search" Color="primary" Class="rounded-2" HideDetails="@("auto")" Flat Dense Solo BackgroundColor="fill-lighten-1" Placeholder="@T("Search")">
                    <PrependInnerContent>
                        <MIcon Size=16 Class="mr-2 neutral-lighten-1--text">mdi-magnify</MIcon>
                    </PrependInnerContent>
                </MTextField>
                <MButton Color="primary" MinWidth=80 Height=32 Class="ml-6 rounded-pill" OnClick="()=>OpenObjectForm()">
                    @(RolePage.CurrentData.Id==Guid.Empty?T("Add Role"):T("Edit Role"))
                </MButton>
            </MCol>
        </MRow>
    </MCardText>
</MCard>

<MDataTable HideDefaultFooter Headers="RolePage.Headers" TItem="RoleItemResponse" Items="RolePage.Datas" Class="table-header-fill table-border-solid">
    <HeaderColContent Context="header">
        <span class="text-body neutral-lighten-1--text">@header.Text</span>
    </HeaderColContent>

    <ItemColContent>
        @switch (context.Header.Value)
        {
            case nameof(RoleItemResponse.Name):
                <div class="hover-pointer d-flex my-2" @onclick="()=> OpenObjectForm(context.Item)">
                    <span>@context.Item.Name</span>
                </div>
                break;
            case nameof(RoleItemResponse.Number):
                 <span>@context.Item.Number</span>
                break;
            case nameof(RoleItemResponse.State):
                 <span>@T(context.Item.State.ToString())</span>
                break;
            case nameof(RoleItemResponse.CreationTime):
                <span>@T(context.Item.CreationTime.ToString("yyyy-MM-dd HH:mm:ss"))</span>
            break;
            case nameof(RoleItemResponse.Describe):
                 <span>@context.Item.Describe</span>
                break;
            case "Action":
                <MButton Color="primary" OnClick="()=> OpenObjectForm(context.Item)">Edit</MButton>
                <MButton Color="error" OnClick="()=> OpenDeleteRoleDialog(context.Item)">Delete</MButton>
                break;
            default:
                @context.Value
                break;
        }
    </ItemColContent>
</MDataTable>

<AddOrEdit @bind-Visible=_openRoleForm />
<Masa.Framework.Admin.RCL.RBAC.Shared.ConfirmDialog Title="@T("Error")" Message=@RolePage.Message @bind-Show="RolePage.Error" />
<Masa.Framework.Admin.RCL.RBAC.Shared.ConfirmDialog Title="@T("Information")" ConfirmMode Message=@T("Are you sure you need to delete?") @bind-Show="_confirmDelete" WhenConfirm="DeleteRoleAsync" />
<Masa.Framework.Admin.RCL.RBAC.Shared.MLodding Lodding=RolePage.Lodding />


@code{
    public bool _openRoleForm;
    public bool _confirmDelete;

    [Inject]
    public RolePage RolePage { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        RegisterPage(RolePage);
        await RolePage.QueryPageDatasAsync();
    }

    public void OpenObjectForm(RoleItemResponse? item = null)
    {
        _openRoleForm = true;
        RolePage.CurrentData = item ?? new();
    }

     void OpenDeleteRoleDialog(RoleItemResponse item)
    {
        RolePage.CurrentData = item;
        _confirmDelete = true;
    }

    async Task DeleteRoleAsync(bool confirm)
    {
        if (confirm) await RolePage.DeleteAsync();
    }
}