<MNavigationDrawer Temporary Fixed Right Value=Visible ValueChanged=VisibleChanged Width="465" Class="pa-6">
    <div class="block-between mb-12">
        <span class="text-h6">@(RolePage.CurrentAuthorizeData.Id == Guid.Empty ?"Add Authorize":"Edit Authorize")</span>
        <MIcon Color="neutral-lighten-3" Size=24 OnClick="()=>Visible=false">mdi-close</MIcon>
    </div>
    <MForm Model=RolePage.CurrentAuthorizeData EnableDataAnnotationsValidation>
        <span class="text-btn">Gender</span>
        <MRadioGroup @bind-Value="RolePage.CurrentAuthorizeData.PermissionType" HideDetails="@("auto")" Color="primary" Row Class="mt-1">
            <MRadio Color="primary" Label="@PermissionType.Private.ToString()" Value="@PermissionType.Private"></MRadio>
            <MRadio Color="primary" Label="@PermissionType.Public.ToString()" Value="@PermissionType.Public"></MRadio>
        </MRadioGroup>
    </MForm>
</MNavigationDrawer>

@code {
    public RolePage? _rolePage;

    [Parameter]
    public RolePage RolePage
    {
        get => _rolePage ?? throw new Exception("Please set parameter RolePage");
        set
        {
            _rolePage = value;
        }
    }

    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    private async Task UpdateVisible(bool visible)
    {
        if (VisibleChanged.HasDelegate)
        {
            await VisibleChanged.InvokeAsync(visible);
        }
        else
        {
            Visible = visible;
        }
    }

    private async Task AddData(EditContext context)
    {
        if (context.Validate())
        {            
            //await RolePage.AddOrUpdateAsync();
            await UpdateVisible(false);
        }
    }
}
