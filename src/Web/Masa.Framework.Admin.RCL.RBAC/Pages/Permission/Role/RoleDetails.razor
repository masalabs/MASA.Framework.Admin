<MCard>
    <MCardText>
        <div class="d-flex block-center mt-3">
            <MAvatar Size="120">
                <MImage Src="" />
            </MAvatar>
            <div Class="ml-6">
                <h5 class="mb-6">@RolePage.CurrentData.Name</h5>
                <span>@RolePage.CurrentData.Describe</span>
            </div>
        </div>
    </MCardText>
</MCard>

<MCard>
    <MCardText>
        <MRow>
            <MCol Md=6 Sm=12 Class="d-flex block-center">
                <span class="text-btn neutral-lighten-1--text">已授权用户</span>               
            </MCol>
            <MCol Md=6 Sm=12 Class="d-flex block-center">
                授权
            </MCol>
        </MRow>
    </MCardText>

    @*<MDataTable ShowSelect Headers="_headers" Items="_userPage.GetPageDatas()" TItem="UserDto" ItemsPerPage="_userPage.PageSize" HideDefaultFooter Class="user ml-2 table-border-none">
        <HeaderColContent Context="header">
            <span class="text-subtitle">@header.Text</span>
        </HeaderColContent>
        <ItemColContent>
            @switch (context.Header.Value)
            {
                case nameof(UserDto.UserName):
                    <div class="hover-pointer d-flex my-2" @onclick="()=>NavigateToDetails(context.Item.Id)">
                        @if (string.IsNullOrEmpty(context.Item.HeadImg))
                        {
                            string color = context.Item.Color;

                            <MAvatar Size=48 Color="@($"{color}-lighten-5")" Class="mt-1">
                                <span class="@($"{color}--text")">@context.Item.SampleName</span>
                            </MAvatar>
                        }
                        else
                        {
                            <MAvatar Size=48 Class="mt-1">
                                <MImage Contain Src="@context.Item.HeadImg"></MImage>
                            </MAvatar>
                        }
                        <div class="ml-4">
                            <div class="text-subtitle">@context.Item.FullName</div>
                            <div class="text-caption mt-1">@@@context.Item.UserName</div>
                        </div>
                    </div>
                    break;
                case (nameof(UserDto.Email)):
                    <span>@context.Item.Email</span>
                    break;
                case nameof(UserDto.Role):
                    var arr = _roleIconMap[context.Item.Role!].Split(",");
                    <MIcon Left Small Class="@($"{arr[1]}--text")">@arr[0]</MIcon>
                    @context.Item.Role
                    break;
                case (nameof(UserDto.Plan)):
                    @context.Item.Plan
                    break;
                case nameof(UserDto.Status):
                    string statusColor = context.Item.Color;
                    <MChip Color="@($"{statusColor}-lighten-5")" TextColor="@(statusColor)" Ripple="false">
                        <span>@context.Item.Status</span>
                    </MChip>
                    break;
                case "Action":
                    <MMenu Right Bottom>
                        <ActivatorContent Context="activatorContext">
                            <MButton Icon @attributes="@activatorContext.Attrs">
                                <MIcon XSmall>fas fa-ellipsis-v</MIcon>
                            </MButton>
                        </ActivatorContent>
                        <ChildContent>
                            <MList>
                                <MListItem OnClick="()=>NavigateToDetails(context.Item.Id)">
                                    <MIcon Small>fas fa-user-tie</MIcon>
                                    <MListItemTitle Class="ml-2"> Details </MListItemTitle>
                                </MListItem>
                                <MListItem OnClick="()=>NavigateToEdit(context.Item.Id)">
                                    <MIcon Small>far fa-edit</MIcon>
                                    <MListItemTitle Class="ml-2"> Edit </MListItemTitle>
                                </MListItem>
                                <MListItem OnClick="()=>_userPage.UserDatas.RemoveAt(_userPage.UserDatas.FindIndex(u=>u.Id==context.Item.Id))">
                                    <MIcon Small>far fa-trash-alt</MIcon>
                                    <MListItemTitle Class="ml-2"> Delete </MListItemTitle>
                                </MListItem>
                            </MList>
                        </ChildContent>
                    </MMenu>
                    break;
                default:
                    @context.Value
                    break;
            }
        </ItemColContent>
    </MDataTable>*@
</MCard>


<MCard>
    <MCardText>
        <MRow>
            <MCol Md=6 Sm=12 Class="d-flex block-center">
                <span class="text-btn neutral-lighten-1--text">已授权规则</span>               
            </MCol>
            <MCol Md=6 Sm=12 Class="d-flex block-center">
                添加授权
            </MCol>
        </MRow>

        <MRow>
            @foreach(var authorizeItem in RolePage.AuthorizeDatas)
            {
                <MCol Md=6 Sm=12 Class="d-flex">
                    <p></p>       
                </MCol>
            }
        </MRow>
    </MCardText>

    
</MCard>

@code {
    public RolePage? _rolePage;

    [Parameter]
    public RolePage RolePage
    {
        get => _rolePage ?? throw new Exception("Please set parameter RolePage");
        set
        {
            _rolePage = value;
        }
    }

    protected override async Task OnInitializedAsync()
    {
       await RolePage.QueryAuthorizeItemsAsync();
    }
}
