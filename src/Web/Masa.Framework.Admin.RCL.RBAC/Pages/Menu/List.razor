@page "/Menu"
@inject NavigationManager Nav

@*<MCard>
    <MCardText Class="pa-6">
    <h6>Filters</h6>
    <MRow Class="mt-3">
    <MCol Sm=12 Md=4>
    <MSelect @bind-Value="_menuPage.Role"
    Color="primary"
    HideDetails="@("auto")"
    Clearable
    Outlined
    Items="@UserService.GetRoleList()"
    ItemText="u => u"
    ItemValue="u => u"
    Label="Role">
    </MSelect>
    </MCol>
    <MCol Sm=12 Md=4>
    <MSelect @bind-Value="_menuPage.Plan"
    Color="primary"
    HideDetails="@("auto")"
    Clearable
    Outlined
    Items="@UserService.GetPlanList()"
    ItemText="u => u"
    ItemValue="u => u"
    Label="Plan">
    </MSelect>
    </MCol>
    <MCol Sm=12 Md=4>
    <MSelect @bind-Value="_menuPage.Status"
    Color="primary"
    HideDetails="@("auto")"
    Clearable
    Outlined
    Items="@UserService.GetStatusList()"
    ItemText="u => u"
    ItemValue="u => u"
    Label="Status">
    </MSelect>
    </MCol>
    </MRow>
    </MCardText>
    </MCard>*@

<MCard Class="mt-6">
    <MCardText Class="pa-6">
        <MRow>
            <MCol Md=6 Sm=12 Class="d-flex block-center">
                <span class="text-btn neutral-lighten-1--text">Show:</span>
                <MSelect OnSelectedItemUpdate="OnPageSizeChanged"
                         Color="primary"
                         Style="max-width:120px;"
                         Dense
                         Class="mx-6"
                         HideDetails="@("auto")"
                         Outlined
                         Items="@_menuPage.PageSizes"
                         TItem="int"
                         TValue="int"
                         TItemValue="int"
                         ItemText="u => u.ToString()"
                         ItemValue="u => u">
                </MSelect>
                <span class="text-btn">entries</span>
            </MCol>
            <MCol Md=6 Sm=12 Class="d-flex block-center">
                <MTextField OnChange="OnSearchChanged" Color="primary" TValue="string" Class="rounded-2" HideDetails="@("auto")" Flat Dense Solo BackgroundColor="fill-lighten-1" Placeholder="Search">
                    <PrependInnerContent>
                        <MIcon Size=16 Class="mr-2 neutral-lighten-1--text">mdi-magnify</MIcon>
                    </PrependInnerContent>
                </MTextField>
                <MButton Color="primary" MinWidth=80 Height=32 Class="ml-6 rounded-pill" OnClick="OpenAddMenuForm">
                    Add Menu
                </MButton>
            </MCol>
        </MRow>
    </MCardText>

    <MDataTable Headers="_menuPage.Headers" Items="_menuPage.MenuDatas" TItem="MenuItemResponse" ItemsPerPage="_menuPage.PageSize" HideDefaultFooter Class="user ml-2 table-border-none">
        <HeaderColContent Context="header">
            <span class="text-subtitle">@header.Text</span>
        </HeaderColContent>
        <ItemColContent>
            <div @onclick="()=> _menuPage.CurrentMenuData = context.Item">
                @switch (context.Header.Value)
                {
                    case nameof(MenuItemResponse.Name):
                        <div class="hover-pointer d-flex my-2" @onclick="()=> _openMenuForm = true">
                            <span>@context.Item.Name</span>
                        </div>
                        break;
                    case (nameof(MenuItemResponse.Icon)):
                        <MIcon Left Small Color="primary">@context.Item.Icon</MIcon>
                        break;
                    case nameof(MenuItemResponse.Sort):
                        @context.Item.Sort
                        break;
                    case (nameof(MenuItemResponse.Describe)):
                        @context.Item.Describe
                        break;
                    case nameof(MenuItemResponse.Disabled):
                        @(context.Item.Disabled?"Disabled":"Enable")
                        break;
                    case "Action":
                        <MButton @onclick="OpenAddMenuForm">
                            Edit
                        </MButton>
                        <MButton Color="error" OnClick="DeleteMenuAsync">
                            Delete
                        </MButton>
                        break;
                    default:
                        @context.Value
                        break;
                }
            </div>
        </ItemColContent>
    </MDataTable>

    <MCardText>
        <div class="d-flex">
            <div class="mr-auto pt-3 text-btn neutral-lighten-1--text">Showing @((_menuPage.PageIndex-1)*_menuPage.PageSize+1) to @(_menuPage.PageIndex*_menuPage.PageSize) of @_menuPage.CurrentCount entries</div>
            @if (_menuPage.PageCount > 0)
            {
                <MPagination @bind-Value="_menuPage.PageIndex" Color="primary" Circle Length=@_menuPage.PageCount></MPagination>
            }
        </div>
    </MCardText>
</MCard>

<AddOrEdit @bind-Visible=_openMenuForm></AddOrEdit>

<MDialog @bind-Value="_menuPage.Success" Transition="dialog-bottom-transition" MaxWidth=600>
    <ChildContent>
        <MCard>
            <MToolbar Color="red">
                Error
            </MToolbar>
            <MCardText>
                <div class="text-h2 pa-12">@_menuPage.Message</div>
            </MCardText>
            <MCardActions Class="justify-end">
                <MButton Text OnClick="() => _menuPage.Success = true">
                    Close
                </MButton>
            </MCardActions>
        </MCard>
    </ChildContent>
</MDialog>

<Masa.Framework.Admin.RCL.RBAC.Shared.Lodding Lodding />

@code{
    public bool _openMenuForm;
    public MenuPage _menuPage = default!;

    [Inject]
    public ConfigurationCaller ConfigurationCaller { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _menuPage = new(ConfigurationCaller);
        await _menuPage.QueryPageDatasAsync();
    }

    public async Task OnPageSizeChanged(int pageSize)
    {
        _menuPage.PageSize = pageSize;
        await _menuPage.QueryPageDatasAsync();
    }

    public async Task OnSearchChanged(string search)
    {
        _menuPage.Search = search;
        await _menuPage.QueryPageDatasAsync();
    }

    public void OpenAddMenuForm()
    {
        _menuPage.CurrentMenuData = new();
        OpenMenuForm();
    }

    public void OpenMenuForm() => _openMenuForm = true;

    private async Task DeleteMenuAsync()
    {
        await _menuPage.DeleteAsync();
    }
}