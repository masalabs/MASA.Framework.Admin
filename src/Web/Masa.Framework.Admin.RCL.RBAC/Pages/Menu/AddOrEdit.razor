@inherits RBACCompontentBase

<MNavigationDrawer Temporary Fixed Right Value=Visible ValueChanged=VisibleChanged Width="465" Class="pa-6">
    <div class="block-between mb-12">
        <span class="text-h6">@(MenuPage.CurrentData.Id == Guid.Empty ? T("Add Menu"):T("Edit Menu"))</span>
        <MIcon Color="neutral-lighten-3" Size=24 OnClick="()=>Visible=false">mdi-close</MIcon>
    </div>
    <MForm Model=MenuPage.CurrentData EnableDataAnnotationsValidation>
        <MTextField @bind-Value="MenuPage.CurrentData.Name" Class="mb-6" Label="@T("Menu.Name")" HideDetails="@("auto")" Outlined />
        <MTextField @bind-Value="MenuPage.CurrentData.Icon" Class="mb-6" Label="@T("Icon")" HideDetails="@("auto")" Outlined />
        <MTextField @bind-Value="MenuPage.CurrentData.Sort" Class="mb-6" Label="@T("Sort")" HideDetails="@("auto")" Outlined />
        <MRadioGroup @bind-Value="MenuPage.CurrentData.Disabled" Row Class="mb-6">
            <MRadio Label="@T("Enable")" Value="false" />
            <MRadio Label="@T("Disabled")" Value="true" />
        </MRadioGroup>
        <MTextarea @bind-Value="MenuPage.CurrentData.Describe" Class="mb-6" Label="@T("Describe")" HideDetails="@("auto")" Outlined />

        <div style="bottom:48px;right:24px;position:absolute">
            <MButton MinWidth=80 Height=40 Outlined Class="text-btn rounded-pill" OnClick="async() => await UpdateVisible(false)"> @T("Cancel") </MButton>
            <MButton MinWidth=80 Height=40 Color="primary" Class="ml-6 rounded-pill" OnClick="async ()=> await AddData(context)"> @T("Confirm") </MButton>
        </div>
    </MForm>
</MNavigationDrawer>

@code {
    [Inject]
    public MenuPage MenuPage { get; set; } = default!;

    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    private async Task UpdateVisible(bool visible)
    {
        if (VisibleChanged.HasDelegate)
        {
            await VisibleChanged.InvokeAsync(visible);
        }
        else
        {
            Visible = visible;
        }
    }

    private async Task AddData(EditContext context)
    {
        if (context.Validate())
        {            
            await MenuPage.AddOrUpdateAsync();
            await UpdateVisible(false);
        }
    }
}
