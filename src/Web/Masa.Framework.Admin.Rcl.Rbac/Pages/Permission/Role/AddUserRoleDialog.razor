@inherits AdminCompontentBase

<MRow Justify="@JustifyTypes.Center">
    <MDialog Persistent @bind-Value="Visible" Width="800">
        <ChildContent>
            <MCard>
                <div class="block-between pa-4">
                    <span class="text-h6">@T("Add User")</span>
                    <MIcon Color="neutral-lighten-3" Size=24 OnClick="()=>UpdateVisible(false)">mdi-close</MIcon>
                </div>
                <MDivider></MDivider>
                <MCardText Class="pb-3">
                    <MRow Class="mt-0">
                        <MCol Class="pt-0" Style="height:480px;border-right:solid 1px #e9edf7;">
                            <MTextField @bind-Value="_search" Color="primary" Class="my-2 rounded-2" HideDetails="@("auto")" Flat Dense Solo Outlined Placeholder="@T("Search")">
                                <PrependInnerContent>
                                    <MIcon Size=16 Class="mr-2 neutral-lighten-1--text">mdi-magnify</MIcon>
                                </PrependInnerContent>
                            </MTextField>
                            <div class="hover-pointer pa-2" style="color:blue" @onclick="() => DetailPage.AllUsers.Where(u => u.Name?.Contains(_search ?? string.Empty) is true || u.Account.Contains(_search ?? string.Empty)).ForEach(u => u.Select = true)" >@T("All")</div>
                            <MVirtualScroll Height=380 OverscanCount=4 ItemHeight=64 Items="@DetailPage.AllUsers.Where(u => !u.Select && (u.Name?.Contains(_search ?? string.Empty) is true || u.Account.Contains(_search ?? string.Empty))).ToList()">
                                <ItemContent>
                                     <div class="hover-pointer pa-2" @onclick="() => context.Select = true">
                                         <div style="color:blue">@context.Account</div>
                                         <div>@context.Name</div>
                                     </div>
                                </ItemContent>
                            </MVirtualScroll>
                        </MCol>
                        <MCol Class="pt-0" Style="height:480px;">
                            <div class="block-between my-2">
                                <span>@T("Assign the following user access authorizations")</span>
                                <div class="hover-pointer" style="color:blue" @onclick="() => DetailPage.AllUsers.ForEach(r => r.Select = false)">@T("Clear")</div>
                            </div>
                            <MVirtualScroll Height=440 OverscanCount=4 ItemHeight=64 Items="@DetailPage.AllUsers.Where(r => r.Select).ToList()">
                                <ItemContent>                                   
                                    <div class="block-between pa-2 mb-1" style="background-color: #f1f2f5">
                                        <div>
                                            <div class="text-btn neutral-lighten-1--text">@(context.Account)</div>
                                            <div>@context.Name</div>
                                        </div>                                  
                                        <MIcon Color="neutral-lighten-3" Size=24 OnClick="() => context.Select = false">mdi-close</MIcon>
                                    </div>
                                </ItemContent>
                            </MVirtualScroll>
                        </MCol>
                    </MRow>
                </MCardText>
                <MDivider></MDivider>
                <MCardActions>
                    <MSpacer></MSpacer>
                    <MButton MinWidth=80 Height=35 Outlined Class="text-btn rounded-pill" OnClick="() =>  UpdateVisible(false)">@T("Cancel")</MButton>
                    <MButton MinWidth=80 Height=35 Color="primary" Class="ml-6 rounded-pill" OnClick="async()=> await Submit()">@T("Confirm")</MButton>
                </MCardActions>
            </MCard>
        </ChildContent>
    </MDialog>
</MRow>

@code {
    [Inject]
    public RoleDetailsPage DetailPage { get; set; } = default!;

    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    string? _search;

    private async Task UpdateVisible(bool visible)
    {       
        if (VisibleChanged.HasDelegate)
        {
            await VisibleChanged.InvokeAsync(visible);
        }
        else
        {
            Visible = visible;
        }       
    }

    protected override async Task OnParametersSetAsync()
    {
        if(Visible is true)
        {
            await DetailPage.GetAllUserAsync();
            await DetailPage.GetUserListByRole();
        }
    }

    private async Task Submit()
    {
        await DetailPage.AddUserRolesAsync();
        await DetailPage.GetUserListByRole();
        await UpdateVisible(false);
    }
}